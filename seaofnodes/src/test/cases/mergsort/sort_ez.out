START:                            [[   ]]
  10 Start   ____ ____ ____       [[    15   52   55   61  158   12   67    9  102  179  ]]  [  Ctrl, #TOP, int]

L9:                               [[  START      ]]
   9 merge_s ____   10            [[    50   51   54   56   60  321  320  319  318  317  316  315  314  313  312  311  310  309  308  307  306  305  304  401  398  362  364  400  403  405    8  ]]  Ctrl
  50 $mem       9   15            [[     8       ]]  #BOT
  51 a          9   52            [[   398       ]]  *[int]
  54 n          9   55            [[   401       ]]  int
  56 b          9   52            [[   362       ]]  *[int]
  60 $rpc       9   61            [[     2       ]]  $[ALL]
 405 #0         9                 [[     8       ]]  0
 403 mov        9  401            [[     8       ]]
 400 mov        9  398            [[     8       ]]
 364 mov        9  362            [[     8       ]]
   8 call       9   50  400  405  403  364  [[     7  ]]  Ctrl
 362 mov        9   56            [[   363  364  ]]
 398 mov        9   51            [[   399  400  ]]
 401 mov        9   54            [[   402  403  ]]
 305 rbp        9                 [[     2       ]]
 309 r13        9                 [[     2       ]]
 310 r14        9                 [[     2       ]]
 311 r15        9                 [[     2       ]]
 312 xmm6       9                 [[     2       ]]
 313 xmm7       9                 [[     2       ]]
 314 xmm8       9                 [[     2       ]]
 315 xmm9       9                 [[     2       ]]
 316 xmm10      9                 [[     2       ]]
 317 xmm11      9                 [[     2       ]]
 318 xmm12      9                 [[     2       ]]
 319 xmm13      9                 [[     2       ]]
 320 xmm14      9                 [[     2       ]]
 321 xmm15      9                 [[     2       ]]
 304 rbx        9                 [[     2       ]]
 308 r12        9                 [[     2       ]]
 307 rdi        9                 [[     2       ]]
 306 rsi        9                 [[     2       ]]

L12:                              [[  START      ]]
  12 main    ____   10            [[    14  208  303  302  301  300  299  298  297  296  295  294  293  292  291  290  289  288  287  286  409  394   22  345  347   32  348   31  349   30  350   29  351   28  352   27  353   26  354   25  355   24  356   23  393   20  397  392   17  360   45   44   43   42   41   40   39   38   37   36   13  357  359  396   11  ]]  Ctrl
  14 $mem      12   15            [[    13   22   22  ]]  #BOT
 208 $rpc      12   61            [[   203       ]]  $[ALL]
 347 mov       12  345            [[    32       ]]
  32 st8       12   33  347 ____ ____  [[    31  ]]  #3:int
 348 mov       12  345            [[    31       ]]
  31 st8       12   32  348 ____ ____  [[    30  ]]  #3:int
 349 mov       12  345            [[    30       ]]
  30 st8       12   31  349 ____ ____  [[    29  ]]  #3:int
 350 mov       12  345            [[    29       ]]
  45 st8       12   46  360 ____ ____  [[    44  ]]  #3:int
  29 st8       12   30  350 ____ ____  [[    28  ]]  #3:int
 351 mov       12  345            [[    28       ]]
  44 st8       12   45  360 ____ ____  [[    43  ]]  #3:int
  28 st8       12   29  351 ____ ____  [[    27  ]]  #3:int
  43 st8       12   44  360 ____ ____  [[    42  ]]  #3:int
 352 mov       12  345            [[    27       ]]
  42 st8       12   43  360 ____ ____  [[    41  ]]  #3:int
  27 st8       12   28  352 ____ ____  [[    26  ]]  #3:int
 353 mov       12  345            [[    26       ]]
  41 st8       12   42  360 ____ ____  [[    40  ]]  #3:int
  26 st8       12   27  353 ____ ____  [[    25  ]]  #3:int
 354 mov       12  345            [[    25       ]]
  40 st8       12   41  360 ____ ____  [[    39  ]]  #3:int
  25 st8       12   26  354 ____ ____  [[    24  ]]  #3:int
 355 mov       12  345            [[    24       ]]
  39 st8       12   40  360 ____ ____  [[    38  ]]  #3:int
  24 st8       12   25  355 ____ ____  [[    23  ]]  #3:int
 356 mov       12  345            [[    23       ]]
  38 st8       12   39  360 ____ ____  [[    37  ]]  #3:int
  23 st8       12   24  356 ____ ____  [[    20  ]]  #3:int
 393 #88       12                 [[    20       ]]  88
  37 st8       12   38  360 ____ ____  [[    36  ]]  #3:int
  20 new_ary   12  393   21   23  [[    19   35   48  ]]  [  Ctrl, *![int], #2:u32, #3:int]
  19 $2        20                 [[    17       ]]  #2:u32
  35 $3        20                 [[    17       ]]  #3:int
  48 [int]     20                 [[   397       ]]  *[int]
 394 #88       12                 [[    22       ]]  88
  36 st8       12   37  360 ____ ____  [[    13  ]]  #3:int
 392 #88       12                 [[    17       ]]  88
 397 mov       12   48            [[   359       ]]
 396 #10       12                 [[    11       ]]  10
  17 new_ary   12  392   19   35  [[    16   46   47  ]]  [  Ctrl, *![int], #2:u32, #3:int]
  16 $2        17                 [[    13       ]]  #2:u32
  46 $3        17                 [[    45       ]]  #3:int
  47 [int]     17                 [[   360       ]]  *[int]
  13 ALLMEM    12   14   16   36  [[    11       ]]  #BOT
 357 mov       12  345            [[    11       ]]
 359 mov       12  397            [[    11       ]]
  22 new_ary   12  394   14   14  [[    21   33   34  ]]  [  Ctrl, *![int], #2:u32, #3:int]
  21 $2        22                 [[    20       ]]  #2:u32
  33 $3        22                 [[    32       ]]  #3:int
  34 [int]     22                 [[   345       ]]  *[int]
  11 call      12   13  357  359  396  [[   182  ]]  Ctrl
 345 mov       12   34            [[   346  357  356  355  354  353  352  351  350  349  348  347  ]]
 360 mov       12   47            [[   361   36   37   38   39   40   41   42   43   44   45  ]]
 286 rbx       12                 [[   409       ]]
 409 mov       12  286            [[   410       ]]
 288 rsi       12                 [[   203       ]]
 289 rdi       12                 [[   203       ]]
 290 r12       12                 [[   203       ]]
 291 r13       12                 [[   203       ]]
 292 r14       12                 [[   203       ]]
 293 r15       12                 [[   203       ]]
 294 xmm6      12                 [[   203       ]]
 295 xmm7      12                 [[   203       ]]
 296 xmm8      12                 [[   203       ]]
 297 xmm9      12                 [[   203       ]]
 298 xmm10     12                 [[   203       ]]
 299 xmm11     12                 [[   203       ]]
 300 xmm12     12                 [[   203       ]]
 301 xmm13     12                 [[   203       ]]
 302 xmm14     12                 [[   203       ]]
 303 xmm15     12                 [[   203       ]]
 287 rbp       12                 [[   203       ]]

L179:                             [[  START      ]]
 179 eq      ____   10            [[   189  190  194  197  201  285  284  283  282  281  280  279  278  277  276  275  274  273  272  271  270  269  268  390  178  ]]  Ctrl
 189 $mem     179   15            [[   187  193  199  199  ]]  #BOT
 190 a        179   52            [[   187       ]]  *[int]
 194 b        179   52            [[   193       ]]  *[int]
 197 n        179   55            [[   195       ]]  int
 201 $rpc     179   61            [[   174       ]]  $[ALL]
 390 #0       179                 [[   191       ]]  0
 272 r12      179                 [[   174       ]]
 273 r13      179                 [[   174       ]]
 274 r14      179                 [[   174       ]]
 275 r15      179                 [[   174       ]]
 276 xmm6     179                 [[   174       ]]
 277 xmm7     179                 [[   174       ]]
 278 xmm8     179                 [[   174       ]]
 279 xmm9     179                 [[   174       ]]
 280 xmm10    179                 [[   174       ]]
 281 xmm11    179                 [[   174       ]]
 282 xmm12    179                 [[   174       ]]
 283 xmm13    179                 [[   174       ]]
 284 xmm14    179                 [[   174       ]]
 285 xmm15    179                 [[   174       ]]
 271 rdi      179                 [[   174       ]]
 270 rsi      179                 [[   174       ]]
 269 rbp      179                 [[   174       ]]
 268 rbx      179                 [[   174       ]]

L158:                             [[  START      ]]
 158 copy_ar ____   10            [[   163  165  167  170  172  173  249  248  247  246  245  244  243  242  241  240  239  238  237  236  235  234  233  232  157  ]]  Ctrl
 163 begin    158   55            [[   162       ]]  int
 165 end      158   55            [[   160       ]]  int
 167 $mem     158   15            [[   166  168  ]]  #BOT
 170 b        158   52            [[   169       ]]  *[int]
 172 a        158   52            [[   171       ]]  *[int]
 173 $rpc     158   61            [[   154       ]]  $[ALL]
 232 rbx      158                 [[   154       ]]
 238 r14      158                 [[   154       ]]
 239 r15      158                 [[   154       ]]
 240 xmm6     158                 [[   154       ]]
 241 xmm7     158                 [[   154       ]]
 242 xmm8     158                 [[   154       ]]
 243 xmm9     158                 [[   154       ]]
 244 xmm10    158                 [[   154       ]]
 245 xmm11    158                 [[   154       ]]
 246 xmm12    158                 [[   154       ]]
 247 xmm13    158                 [[   154       ]]
 248 xmm14    158                 [[   154       ]]
 249 xmm15    158                 [[   154       ]]
 237 r13      158                 [[   154       ]]
 236 r12      158                 [[   154       ]]
 235 rdi      158                 [[   154       ]]
 234 rsi      158                 [[   154       ]]
 233 rbp      158                 [[   154       ]]

L67:                              [[  START      ]]
  67 split_m ____   10            [[    70   73   74   75   78   95  267  266  265  264  263  262  261  260  259  258  257  256  255  254  253  252  251  250  383  332  328  324  338  387   84   82   66  ]]  Ctrl
  70 $mem      67   15            [[    68   91  ]]  #BOT
  73 a         67   52            [[   324       ]]  *[int]
  74 b         67   52            [[   328       ]]  *[int]
  75 begin     67   55            [[   383       ]]  int
  78 end       67   55            [[   332       ]]  int
  95 $rpc      67   61            [[    63       ]]  $[ALL]
 387 mov       67  383            [[    84       ]]
 328 mov       67   74            [[   331  330  329  ]]
 332 mov       67   78            [[   338  336  333  335  ]]
 383 mov       67   75            [[   387  386  384  385  ]]
 338 mov       67  332            [[    84       ]]
 324 mov       67   73            [[   327  325  326  ]]
  84 sub       67  338  387       [[    82       ]]  int
  82 cmp       67   84            [[    66       ]]  bool
  66 j<=       67   82            [[    65   69  ]]  [  Ctrl, Ctrl]
 255 r13       67                 [[    63       ]]
 256 r14       67                 [[    63       ]]
 257 r15       67                 [[    63       ]]
 258 xmm6      67                 [[    63       ]]
 259 xmm7      67                 [[    63       ]]
 260 xmm8      67                 [[    63       ]]
 261 xmm9      67                 [[    63       ]]
 262 xmm10     67                 [[    63       ]]
 263 xmm11     67                 [[    63       ]]
 264 xmm12     67                 [[    63       ]]
 265 xmm13     67                 [[    63       ]]
 266 xmm14     67                 [[    63       ]]
 267 xmm15     67                 [[    63       ]]
 252 rsi       67                 [[    63       ]]
 251 rbp       67                 [[    63       ]]
 250 rbx       67                 [[    63       ]]
 253 rdi       67                 [[    63       ]]
 254 r12       67                 [[    63       ]]

L102:                             [[  START      ]]
 102 merge   ____   10            [[   119  122  125  132  134  139  153  231  230  229  228  227  226  225  224  223  222  221  220  219  218  217  216  215  214  406  322  368  373  101  ]]  Ctrl
 119 begin    102   55            [[   368  135  ]]  int
 122 middle   102   55            [[   116  373  ]]  int
 125 end      102   55            [[   123  150  ]]  int
 132 $mem     102   15            [[   131  152  ]]  #BOT
 134 b        102   52            [[   133       ]]  *[int]
 139 a        102   52            [[   322       ]]  *[int]
 153 $rpc     102   61            [[    98       ]]  $[ALL]
 373 mov      102  122            [[   126       ]]
 368 mov      102  119            [[   118       ]]
 322 mov      102  139            [[   323  129  140  138  ]]
 214 rbx      102                 [[   406       ]]
 406 mov      102  214            [[   407       ]]
 217 rdi      102                 [[    98       ]]
 222 xmm6     102                 [[    98       ]]
 223 xmm7     102                 [[    98       ]]
 224 xmm8     102                 [[    98       ]]
 225 xmm9     102                 [[    98       ]]
 226 xmm10    102                 [[    98       ]]
 227 xmm11    102                 [[    98       ]]
 228 xmm12    102                 [[    98       ]]
 229 xmm13    102                 [[    98       ]]
 230 xmm14    102                 [[    98       ]]
 231 xmm15    102                 [[    98       ]]
 216 rsi      102                 [[    98       ]]
 215 rbp      102                 [[    98       ]]
 220 r14      102                 [[    98       ]]
 221 r15      102                 [[    98       ]]
 219 r13      102                 [[    98       ]]
 218 r12      102                 [[    98       ]]

LOOP178:                          [[  L179      L184       ]]
 178 Loop    ____  179  419       [[   191  195  177  ]]  Ctrl
 191 Phi_i    178  390  192       [[   195  187  192  193  ]]  int
 195 cmp      178  191  197       [[   177       ]]  bool
 177 j>=      178  195            [[   176  186  ]]  [  Ctrl, Ctrl]

LOOP157:                          [[  L158      L159       ]]
 157 Loop    ____  158  411       [[   162  168  160  156  ]]  Ctrl
 162 Phi_k    157  163  164       [[   160  164  169  171  ]]  int
 168 Phi_$3   157  167  169       [[   166  169  171  ]]  #BOT
 160 cmp      157  162  165       [[   156       ]]  bool
 156 j>=      157  160            [[   155  159  ]]  [  Ctrl, Ctrl]

LOOP101:                          [[  L102      L103       ]]
 101 Loop    ____  102  413       [[   118  126  131  135  150  100  ]]  Ctrl
 118 Phi_i    101  368  120       [[   129  116  121  120  138  ]]  int
 126 Phi_j    101  373  127       [[   142  123  127  128  140  ]]  int
 131 Phi_$3   101  132  133       [[   129  133  138  140  142  152  ]]  #BOT
 135 Phi_k    101  119  136       [[   150  133  136  ]]  int
 150 cmp      101  135  125       [[   100       ]]  bool
 100 j>=      101  150            [[    99  115  ]]  [  Ctrl, Ctrl]

L7:                               [[  L9         ]]
   7 CallEnd    8                 [[     6   57  ]]  [  Ctrl, #BOT, int]
  57 $mem       7                 [[     5       ]]  #BOT

L182:                             [[  L12        ]]
 182 CallEnd   11                 [[   181  183  ]]  [  Ctrl, #BOT, int]
 183 $mem     182                 [[   180       ]]  #BOT

L65:                              [[  L67        ]]
  65 True      66                 [[    53   64  ]]  Ctrl
  53 #0        65                 [[    93       ]]  0

L69:                              [[  L67        ]]
  69 False     66                 [[   335  386   77   79   76  341  326  331  344  385   68  ]]  Ctrl
 326 mov       69  324            [[    68       ]]
 331 mov       69  328            [[    68       ]]
 385 mov       69  383            [[    68       ]]
 344 mov       69  341            [[    68       ]]
  68 call      69   70  326  385  344  331  [[    72  ]]  Ctrl
 335 mov       69  332            [[    77       ]]
 386 mov       69  383            [[    77       ]]
  77 add       69  335  386       [[    76       ]]  int
  79 #2        69                 [[    76       ]]  2
  76 div       69   77   79       [[   341       ]]  int
 341 mov       69   76            [[   344  342  343  ]]

L6:                               [[  L7         ]]
   6 $ctrl      7                 [[   363  399  402  404    5  ]]  Ctrl
 363 mov        6  362            [[     5       ]]
 399 mov        6  398            [[     5       ]]
 404 #0         6                 [[     5       ]]  0
 402 mov        6  401            [[     5       ]]
   5 call       6   57  399  404  402  363  [[     4  ]]  Ctrl

L186:                             [[  LOOP178    ]]
 186 False    177                 [[   193  187  185  ]]  Ctrl
 193 ld8      186  189  194  191  [[   187       ]]  int
 187 cmp8     186  189  190  191  193  [[   185  ]]  bool
 185 j!=      186  187            [[   184  198  ]]  [  Ctrl, Ctrl]

L176:                             [[  LOOP178    ]]
 176 True     177                 [[   149  175  ]]  Ctrl
 149 #1       176                 [[   200       ]]  1

L181:                             [[  L182       ]]
 181 $ctrl    182                 [[   346  361  395  180  ]]  Ctrl
 346 mov      181  345            [[   180       ]]
 361 mov      181  360            [[   180       ]]
 395 #10      181                 [[   180       ]]  10
 180 call     181  183  346  361  395  [[   205  ]]  Ctrl

L159:                             [[  LOOP157    ]]
 159 False    156                 [[   171  169  164  411  ]]  Ctrl
 164 inc      159  162            [[   162       ]]  int
 171 ld8      159  168  172  162  [[   169       ]]  int
 169 st8      159  168  170  162  171  [[   168  ]]  #3:Bot

L115:                             [[  LOOP101    ]]
 115 False    100                 [[   116  114  ]]  Ctrl
 116 cmp      115  118  122       [[   114       ]]  bool
 114 j<       115  116            [[   113  143  ]]  [  Ctrl, Ctrl]

L99:                              [[  LOOP101    ]]
  99 True     100                 [[   152  407  408   98  ]]  Ctrl
 152 ALLMEM    99  132 ____  131  [[    98       ]]  #BOT
 407 mov       99  406            [[    98       ]]
 408 #0        99                 [[    98       ]]  0
  98 Return    99  152  408  153  407  215  216  217  218  219  220  221  222  223  224  225  226  227  228  229  230  231  [[     1  ]]  [  Ctrl, #BOT, 0]

L155:                             [[  LOOP157    ]]
 155 True     156                 [[   166  212  154  ]]  Ctrl
 166 ALLMEM   155  167 ____  168  [[   154       ]]  #BOT
 212 #0       155                 [[   154       ]]  0
 154 Return   155  166  212  173  232  233  234  235  236  237  238  239  240  241  242  243  244  245  246  247  248  249  [[     1  ]]  [  Ctrl, #BOT, 0]

L4:                               [[  L6         ]]
   4 CallEnd    5                 [[     3   58   59  ]]  [  Ctrl, #BOT, int]
  58 $mem       4                 [[     2       ]]  #BOT
  59 #2         4                 [[     2       ]]  int

L198:                             [[  L186       ]]
 198 True     185                 [[   391  418  ]]  Ctrl
 391 #0       198                 [[   200       ]]  0
 418 jmp      198                 [[   175       ]]

L184:                             [[  L186       ]]
 184 False    185                 [[   192  419  ]]  Ctrl
 192 inc      184  191            [[   191       ]]  int

L143:                             [[  L115       ]]
 143 False    114                 [[   381  417  ]]  Ctrl
 381 #0       143                 [[   148       ]]  0
 417 jmp      143                 [[   108       ]]

L205:                             [[  L181       ]]
 205 CallEnd  180                 [[   204  206  207  ]]  [  Ctrl, #BOT, bool]
 206 $mem     205                 [[   203       ]]  #BOT
 207 #2       205                 [[   203       ]]  bool

L113:                             [[  L115       ]]
 113 True     114                 [[   123  112  ]]  Ctrl
 123 cmp      113  125  126       [[   112       ]]  bool
 112 j<=      113  123            [[   111  144  ]]  [  Ctrl, Ctrl]

L72:                              [[  L69        ]]
  72 CallEnd   68                 [[    71   81  ]]  [  Ctrl, #BOT, int]
  71 $mem      72                 [[    80       ]]  #BOT

L3:                               [[  L4         ]]
   3 $ctrl      4                 [[     2       ]]  Ctrl
   2 Return     3   58   59   60  304  305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320  321  [[     1  ]]  [  Ctrl, #BOT, int]

L81:                              [[  L72        ]]
  81 $ctrl     72                 [[   327  330  336  343   80  ]]  Ctrl
 327 mov       81  324            [[    80       ]]
 330 mov       81  328            [[    80       ]]
 343 mov       81  341            [[    80       ]]
 336 mov       81  332            [[    80       ]]
  80 call      81   71  327  343  336  330  [[    89  ]]  Ctrl

L204:                             [[  L205       ]]
 204 $ctrl    205                 [[   410  203  ]]  Ctrl
 410 mov      204  409            [[   203       ]]
 203 Return   204  206  207  208  410  287  288  289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  [[     1  ]]  [  Ctrl, #BOT, bool]

L175:                             [[  L176      L198       ]]
 175 Region  ____  176  418       [[   200  199  174  ]]  Ctrl
 200 Phi_res  175  149  391       [[   174       ]]  bool
 199 ALLMEM   175  189 ____  189  [[   174       ]]  #BOT
 174 Return   175  199  200  201  268  269  270  271  272  273  274  275  276  277  278  279  280  281  282  283  284  285  [[     1  ]]  [  Ctrl, #BOT, bool]

L111:                             [[  L113       ]]
 111 False    112                 [[   323  142  129  110  ]]  Ctrl
 323 mov      111  322            [[   142       ]]
 142 ld8      111  131  323  126  [[   129       ]]  int
 129 cmp8     111  131  322  118  142  [[   110  ]]  bool
 110 j<=      111  129            [[   109  145  ]]  [  Ctrl, Ctrl]

L144:                             [[  L113       ]]
 144 True     112                 [[   380  108  ]]  Ctrl
 380 #1       144                 [[   148       ]]  1

L89:                              [[  L81        ]]
  89 CallEnd   80                 [[    88   90  ]]  [  Ctrl, #BOT, int]
  90 $mem      89                 [[    87       ]]  #BOT

L88:                              [[  L89        ]]
  88 $ctrl     89                 [[   325  329  333  342  384   87  ]]  Ctrl
 325 mov       88  324            [[    87       ]]
 329 mov       88  328            [[    87       ]]
 384 mov       88  383            [[    87       ]]
 342 mov       88  341            [[    87       ]]
 333 mov       88  332            [[    87       ]]
  87 call      88   90  329  384  342  333  325  [[    86  ]]  Ctrl

L109:                             [[  L111       ]]
 109 True     110                 [[   379  415  ]]  Ctrl
 379 #1       109                 [[   148       ]]  1
 415 jmp      109                 [[   108       ]]

L145:                             [[  L111       ]]
 145 False    110                 [[   382  416  ]]  Ctrl
 382 #0       145                 [[   148       ]]  0
 416 jmp      145                 [[   108       ]]

L108:                             [[  L109      L143      L144      L145       ]]
 108 Region  ____  415  417  144  416  [[   148  146  107  ]]  Ctrl
 148 Phi_con  108  379  381  380  382  [[   146  ]]  bool
 146 test     108  148            [[   107       ]]
 107 j!=      108  146            [[   104  141  ]]  [  Ctrl, Ctrl]

L86:                              [[  L88        ]]
  86 CallEnd   87                 [[    85   92   94  ]]  [  Ctrl, #BOT, int]
  92 $mem      86                 [[    91       ]]  #BOT
  94 #2        86                 [[    93       ]]  int

L141:                             [[  L108       ]]
 141 False    107                 [[   140  128  414  ]]  Ctrl
 128 inc      141  126            [[   127       ]]  int
 140 ld8      141  131  322  126  [[   137       ]]  int
 414 jmp      141                 [[   103       ]]

L104:                             [[  L108       ]]
 104 True     107                 [[   138  121  103  ]]  Ctrl
 121 inc      104  118            [[   120       ]]  int
 138 ld8      104  131  322  118  [[   137       ]]  int

L85:                              [[  L86        ]]
  85 $ctrl     86                 [[   412       ]]  Ctrl
 412 jmp       85                 [[    64       ]]

L103:                             [[  L104      L141       ]]
 103 Region  ____  104  414       [[   120  127  137  133  136  413  ]]  Ctrl
 120 Phi_i    103  121  118       [[   118       ]]  int
 127 Phi_j    103  126  128       [[   126       ]]  int
 137 Phi_$3   103  138  140       [[   133       ]]  int
 136 inc      103  135            [[   135       ]]  int
 133 st8      103  131  134  135  137  [[   131  ]]  #3:Bot

L64:                              [[  L65       L85        ]]
  64 Region  ____   65  412       [[    91   93   63  ]]  Ctrl
  91 Phi_$me   64   70   92       [[    63       ]]  #BOT
  93 Phi_arg   64   53   94       [[    63       ]]  int
  63 Return    64   91   93   95  250  251  252  253  254  255  256  257  258  259  260  261  262  263  264  265  266  267  [[     1  ]]  [  Ctrl, #BOT, int]

L1:                               [[  L155      L175      L204       ]]
   1 Stop       2   63   98  154  174  203  [[   ]]  Bot



---eq { *![int] *![int] int -> int #1}---------------------------
               a:rcx,b:rdx,n:r8
0000 ??        xor   rax,rax
0001 ??        JMP   L178
LOOP178:
               i:rax
0002 ??        cmp   rax, r8
0003 ??        j>=   L176                           // L186
L186:
0004 ??        ld8   r9,[rdx+rax*8+8]
0005 ??        cmp8  r9, [rcx+rax*8+8]
0006 ??        j!=   L198                           // L184
L184:
0007 ??        inc   rax += #1
0008 ??        jmp   LOOP178
L419:
0009 ??        JMP   L178
L198:
000A ??        xor   rax,rax
000B ??        jmp   L175
L418:
000C ??        JMP   L175
L176:
000D ??        ldi   rax = #1
000E ??        JMP   L175
L175:
               result:rax
000F ??        ALLME
0010 ??        ret
---{ *![int] *![int] int -> int #1}---------------------------

---merge { *![int] int int int *![int] -> int #0}---------------------------
               begin:rdx,middle:r8,end:r9,b:rcx,a:[stk#38]
0011 ??        mov   xmm0 = rbx                     // def/loop #2
0012 ??        mov   rbx = [rsp+0]                  // def/empty1 #0
0013 ??        mov   r11 = rdx                      // use/self/phi #1
0014 ??        mov   r10 = r8                       // use/self/use #1
0015 ??        JMP   L101
LOOP101:
               i:r11,j:r10,k:rdx
0016 ??        cmp   rdx, r9
0017 ??        j>=   L99                            // L115
L115:
0018 ??        cmp   r11, r8
0019 ??        j<    L113                           // L143
L143:
001A ??        xor   rax,rax
001B ??        jmp   L108
L417:
001C ??        JMP   L108
L113:
001D ??        cmp   r9, r10
001E ??        j<=   L144                           // L111
L111:
001F ??        mov   rax = rbx                      // use/empty1 #0
0020 ??        ld8   rax,[rax+r10*8+8]
0021 ??        cmp8  rax, [rbx+r11*8+8]
0022 ??        j<=   L109                           // L145
L145:
0023 ??        xor   rax,rax
0024 ??        jmp   L108
L416:
0025 ??        JMP   L108
L109:
0026 ??        ldi   rax = #1
0027 ??        jmp   L108
L415:
0028 ??        JMP   L108
L144:
0029 ??        ldi   rax = #1
002A ??        JMP   L108
L108:
               cond:rax
002B ??        test  rax
002C ??        j!=   L104                           // L141
L141:
002D ??        ld8   rax,[rbx+r10*8+8]
002E ??        inc   r10 += #1
002F ??        jmp   L103
L414:
0030 ??        JMP   L103
L104:
0031 ??        ld8   rax,[rbx+r11*8+8]
0032 ??        inc   r11 += #1
0033 ??        JMP   L103
L103:
               i:r11,j:r10,$3:rax
0034 ??        st8   [rcx+rdx*8+8],rax
0035 ??        inc   rdx += #1
0036 ??        jmp   LOOP101
L413:
0037 ??        JMP   L101
L99:
0038 ??        ALLME
0039 ??        mov   rbx = xmm0                     // use/loop/use #2
003A ??        xor   rax,rax
003B ??        ret
---{ *![int] int int int *![int] -> int #0}---------------------------

---merge_sort { *![int] *![int] int -> int #0}---------------------------
               a:rcx,n:r8,b:rdx
003C ??        mov   [rsp+24] = r8                  // def/loop #1
003D ??        mov   [rsp+16] = rcx                 // def/loop #1
003E ??        mov   [rsp+8] = rdx                  // def/loop #0
003F ??        mov   r9 = [rsp+8]                   // use/loop/use #0
0040 ??        mov   rcx = [rsp+16]                 // use/loop/use #1
0041 ??        mov   r8 = [rsp+24]                  // use/loop/use #1
0042 ??        xor   rdx,rdx
0043 ??        call  copy_array  rcx  rdx  r8  r9
0044 ??        mov   r9 = [rsp+8]                   // use/loop/use #0
0045 ??        mov   rcx = [rsp+16]                 // use/loop/use #1
0046 ??        mov   r8 = [rsp+24]                  // use/loop/use #1
0047 ??        xor   rdx,rdx
0048 ??        call  split_merge  rcx  rdx  r8  r9
                 #2    rax
0049 ??        addi  rsp += #40
ret
---{ *![int] *![int] int -> int #0}---------------------------

---split_merge { *![int] int int *![int] -> int #0}---------------------------
               a:r9,b:rcx,begin:rdx,end:r8
004A ??        mov   [rsp+40] = rdx                 // def/loop #1
004B ??        mov   [rsp+32] = r8                  // def/loop #0
004C ??        mov   [rsp+24] = rcx                 // def/loop #0
004D ??        mov   [rsp+16] = r9                  // def/loop #0
004E ??        mov   r8 = [rsp+32]                  // use/loop/use #0
004F ??        mov   r10 = [rsp+40]                 // use/loop/use #1
0050 ??        sub   r8 -= r10
0051 ??        cmp   r8, #1
0052 ??        j<=   L65                            // L69
L69:
0053 ??        mov   rax = [rsp+32]                 // use/loop/use #0
0054 ??        mov   rdx = [rsp+40]                 // use/loop/use #1
0055 ??        add   rax += rdx
0056 ??        ldi   rcx = #2
0057 ??        div   rax = rax / rcx                // kill rdx
0058 ??        mov   [rsp+8] = rax                  // def/loop #0
0059 ??        mov   rcx = [rsp+16]                 // use/loop/use #0
005A ??        mov   r9 = [rsp+24]                  // use/loop/use #0
005B ??        mov   r8 = [rsp+8]                   // use/loop/use #0
005C ??        mov   rdx = [rsp+40]                 // use/loop/use #1
005D ??        call  split_merge  rcx  rdx  r8  r9
005E ??        mov   rcx = [rsp+16]                 // use/loop/use #0
005F ??        mov   r9 = [rsp+24]                  // use/loop/use #0
0060 ??        mov   r8 = [rsp+32]                  // use/loop/use #0
0061 ??        mov   rdx = [rsp+8]                  // use/loop/use #0
0062 ??        call  split_merge  rcx  rdx  r8  r9
0063 ??        mov   [rsp+32] = [rsp+16]            // use/loop/use #0
0064 ??        mov   rcx = [rsp+24]                 // use/loop/use #0
0065 ??        mov   r9 = [rsp+32]                  // use/loop/use #0
0066 ??        mov   r8 = [rsp+8]                   // use/loop/use #0
0067 ??        mov   rdx = [rsp+40]                 // use/loop/use #1
0068 ??        call  merge  rcx  rdx  r8  r9  [stk#42]
                 #2    rax
0069 ??        jmp   L64
L412:
006A ??        JMP   L64
L65:
006B ??        xor   rax,rax
006C ??        JMP   L64
L64:
               arg:rax
006D ??        addi  rsp += #56
ret
---{ *![int] int int *![int] -> int #0}---------------------------

---main { -> int #0}---------------------------

006E ??        mov   [rsp+0] = rbx                  // def/loop #2
006F ??        ldi   rdx = #88
0070 ??        alloc ldi   rcx = #1
call  #calloc
                 [int] rax
0071 ??        mov   [rsp+32] = rax                 // def/loop #0
0072 ??        mov   rdx = [rsp+32]                 // use/loop/use #0
0073 ??        st8   [rdx+8],#10
0074 ??        mov   rcx = [rsp+32]                 // use/loop/use #0
0075 ??        st8   [rcx+16],#9
0076 ??        mov   rax = [rsp+32]                 // use/loop/use #0
0077 ??        st8   [rax+24],#8
0078 ??        mov   r11 = [rsp+32]                 // use/loop/use #0
0079 ??        st8   [r11+32],#7
007A ??        mov   r10 = [rsp+32]                 // use/loop/use #0
007B ??        st8   [r10+40],#6
007C ??        mov   r9 = [rsp+32]                  // use/loop/use #0
007D ??        st8   [r9+48],#5
007E ??        mov   r8 = [rsp+32]                  // use/loop/use #0
007F ??        st8   [r8+56],#4
0080 ??        mov   rdx = [rsp+32]                 // use/loop/use #0
0081 ??        st8   [rdx+64],#3
0082 ??        mov   rcx = [rsp+32]                 // use/loop/use #0
0083 ??        st8   [rcx+72],#2
0084 ??        mov   rax = [rsp+32]                 // use/loop/use #0
0085 ??        st8   [rax+80],#1
0086 ??        ldi   rdx = #88
0087 ??        alloc ldi   rcx = #1
call  #calloc
                 [int] rax
0088 ??        mov   [rsp+24] = rax                 // def/empty1 #1
0089 ??        ldi   rdx = #88
008A ??        alloc ldi   rcx = #1
call  #calloc
                 [int] rax
008B ??        mov   rbx = rax                      // def/empty1 #0
008C ??        st8   [rbx+8],#1
008D ??        st8   [rbx+16],#2
008E ??        st8   [rbx+24],#3
008F ??        st8   [rbx+32],#4
0090 ??        st8   [rbx+40],#5
0091 ??        st8   [rbx+48],#6
0092 ??        st8   [rbx+56],#7
0093 ??        st8   [rbx+64],#8
0094 ??        st8   [rbx+72],#9
0095 ??        st8   [rbx+80],#10
0096 ??        ALLME
0097 ??        mov   rcx = [rsp+32]                 // use/loop/use #0
0098 ??        mov   rdx = [rsp+24]                 // use/empty1 #0
0099 ??        ldi   r8 = #10
009A ??        call  merge_sort  rcx  rdx  r8
009B ??        mov   rcx = [rsp+32]                 // use/loop/use #0
009C ??        mov   rdx = rbx                      // use/empty1 #0
009D ??        ldi   r8 = #10
009E ??        call  eq  rcx  rdx  r8
                 #2    rax
009F ??        mov   rbx = [rsp+0]                  // use/loop/use #2
00A0 ??        addi  rsp += #40
ret
---{ -> int #0}---------------------------

---copy_array { *![int] int int *![int] -> int #1}---------------------------
               begin:rdx,end:r8,b:r9,a:rcx
00A1 ??        JMP   L157
LOOP157:
               k:rdx
00A2 ??        cmp   rdx, r8
00A3 ??        j>=   L155                           // L159
L159:
00A4 ??        ld8   rax,[rcx+rdx*8+8]
00A5 ??        st8   [r9+rdx*8+8],rax
00A6 ??        inc   rdx += #1
00A7 ??        jmp   LOOP157
L411:
00A8 ??        JMP   L157
L155:
00A9 ??        ALLME
00AA ??        xor   rax,rax
00AB ??        ret
---{ *![int] int int *![int] -> int #1}---------------------------
