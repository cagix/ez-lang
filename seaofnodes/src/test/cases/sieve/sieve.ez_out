---sieve { int -> *![int] #1}---------------------------
0000 4883EC28    subi  rsp -= #40
                 N:rdi
0004 48895C2418  mov   [rsp+24] = rbx                 // def/loop #3
0009 48896C2410  mov   [rsp+16] = rbp                 // def/loop #3
000E 4C89642408  mov   [rsp+8] = r12                  // def/loop #3
0013 4C892C24    mov   [rsp+0] = r13                  // def/loop #3
0017 4C8BE7      mov   r12 = rdi                      // def/empty1 #0
001A 4A8D34E508  lea   rsi = r12<<3 + #8
001F 000000
0022 B902000000  ldi   rcx = #2
0027 488BC7      mov   rax = rdi                      // use/empty1 #0
002A 489948F7F9  div   rax = rax / rcx                // kill rdx
002F 488D1CC508  lea   rbx = rax<<3 + #8
0034 000000
0037 BF01000000  alloc ldi   rcx = #1
003C E800000000  call  #calloc
0041 4C8BE8      mov   r13 = rax                      // def/empty1 #2
0044 488BF3      mov   rsi = rbx                      // use/empty1 #1
0047 BF01000000  alloc ldi   rcx = #1
004C E800000000  call  #calloc
0051 488BD8      mov   rbx = rax                      // def/empty1 #2
0054 4D33C9      xor   r9,r9
0057 B802000000  ldi   rax = #2
005C BA04000000  ldi   rdx = #4
LOOP11:
                 nprimes:r9,p:rax,p:rdx
0061 488BC8      mov   rcx = rax                      // def/self #1
0064 493BD4      cmp   rdx, r12
0067 7D59        j>=   LOOP8                          // L22
L22:
LOOP21:
                 p:rcx
0069 488BC1      mov   rax = rcx                      // use/self/use #1
006C 48FFC0      inc   rax += #1
006F 498BD5      mov   rdx = r13                      // use/empty1 #2
0072 48817CCA08  test8 , [rdx+rcx*8+8]
0077 0000000000000000
007F 7405        j==   L17                            // L23
L23:
0081 488BC8      mov   rcx = rax                      // use/self/use #1
0084 EBE3        jmp   LOOP21
L244:
L17:
0086 488BF1      mov   rsi = rcx                      // use/self/two #1
0089 48C1E601    shli  rsi <<= #1
008D 4D8BC1      mov   r8 = r9                        // use/self/phi #1
0090 488BF9      mov   rdi = rcx                      // use/self/use #1
0093 488BD3      mov   rdx = rbx                      // use/empty1 #2
LOOP16:
                 $3:rdx,$3:r8,i:rsi,$3:rdi
0096 488BEE      mov   rbp = rsi                      // def/self #1
0099 4A897CC208  st8   [rdx+r8*8+8],rdi
009E 493BEC      cmp   rbp, r12
00A1 7D13        j>=   L14                            // L57
L57:
00A3 488BF5      mov   rsi = rbp                      // use/self/use #1
00A6 4803F1      add   rsi += rcx
00A9 4C8BC5      mov   r8 = rbp                       // use/self/use #1
00AC BF01000000  ldi   rdi = #1
00B1 498BD5      mov   rdx = r13                      // use/self/use #1
00B4 EBE0        jmp   LOOP16
L243:
L14:
00B6 49FFC1      inc   r9 += #1
00B9 488BD0      mov   rdx = rax                      // use/self/use #1
00BC 480FAFD0    mul   rdx = rdx * rax
00C0 EB9F        jmp   LOOP11
L242:
L9:
LOOP8:
                 nprimes:r9,p:rcx
00C2 498BE9      mov   rbp = r9                       // def/self #1
00C5 493BCC      cmp   rcx, r12
00C8 7D24        j>=   L6                             // L70
L70:
00CA 49817CCD08  test8 , [r13+rcx*8+8]
00CF 0000000000000000
00D7 7405        j==   L66                            // L81
L81:
00D9 4C8BCD      mov   r9 = rbp                       // use/self/use #1
00DC EB0B        jmp   L65
L241:
L66:
00DE 48894CEB08  st8   [rbx+rbp*8+8],rcx
00E3 4C8BCD      mov   r9 = rbp                       // use/self/use #1
00E6 49FFC1      inc   r9 += #1
L65:
                 nprimes:r9
00E9 48FFC1      inc   rcx += #1
00EC EBD4        jmp   LOOP8
L240:
L6:
00EE 488D34ED08  lea   rsi = rbp<<3 + #8
00F3 000000
00F6 BF01000000  alloc ldi   rcx = #1
00FB E800000000  call  #calloc
0100 33C9        xor   rcx,rcx
LOOP5:
                 j:rcx
0102 483BCD      cmp   rcx, rbp
0105 7D0F        j>=   L3                             // L84
L84:
0107 488B54CB08  ld8   rdx,[rbx+rcx*8+8]
010C 488954C808  st8   [rax+rcx*8+8],rdx
0111 48FFC1      inc   rcx += #1
0114 EBEC        jmp   LOOP5
L239:
L3:
0116 4C8B2C24    mov   r13 = [rsp+0]                  // use/loop/use #3
011A 4C8B642408  mov   r12 = [rsp+8]                  // use/loop/use #3
011F 488B6C2410  mov   rbp = [rsp+16]                 // use/loop/use #3
0124 488B5C2418  mov   rbx = [rsp+24]                 // use/loop/use #3
0129 4883C428C3  addi  rsp += #40
012E             ret
---{ int -> *![int] #1}---------------------------

---eq { *![int] *![int] int -> int #0}---------------------------
                 a:rdi,b:rsi,n:rdx
0130 33C0        xor   rax,rax
LOOP105:
                 i:rax
0132 483BC2      cmp   rax, rdx
0135 7D15        j>=   L103                           // L109
L109:
0137 488B4CC608  ld8   rcx,[rsi+rax*8+8]
013C 48394CC708  cmp8  rcx, [rdi+rax*8+8]
0141 7505        j!=   L122                           // L107
L107:
0143 48FFC0      inc   rax += #1
0146 EBEA        jmp   LOOP105
L238:
L122:
0148 33C0        xor   rax,rax
014A EB05        jmp   L102
L237:
L103:
014C B801000000  ldi   rax = #1
L102:
                 result:rax
0151 C3          ret
---{ *![int] *![int] int -> int #0}---------------------------

---main { -> int #0}---------------------------
0160 4883EC08    subi  rsp -= #8
0164 BF14000000  ldi   rdi = #20
0169 E892FEFFFF  call  sieve  rdi
016E 48890424    mov   [rsp+0] = rax                  // def/empty1 #1
0172 BE48000000  ldi   rsi = #72
0177 BF01000000  alloc ldi   rcx = #1
017C E800000000  call  #calloc
0181 488BC8      mov   rcx = rax                      // def/empty1 #0
0184 48C7410802  st8   [rcx+8],#2
0189 000000
018C 48C7411003  st8   [rcx+16],#3
0191 000000
0194 48C7411805  st8   [rcx+24],#5
0199 000000
019C 48C7412007  st8   [rcx+32],#7
01A1 000000
01A4 48C741280B  st8   [rcx+40],#11
01A9 000000
01AC 48C741300D  st8   [rcx+48],#13
01B1 000000
01B4 48C7413811  st8   [rcx+56],#17
01B9 000000
01BC 48C7414013  st8   [rcx+64],#19
01C1 000000
01C4 488B3C24    mov   rdi = [rsp+0]                  // use/empty1 #0
01C8 488BF0      mov   rsi = rax                      // use/empty1 #0
01CB BA08000000  ldi   rdx = #8
01D0 E85BFFFFFF  call  eq  rdi, rsi, rdx
01D5 4883C408C3  addi  rsp += #8
01DA             ret
---{ -> int #0}---------------------------